use std::collections::HashMap;
use pcap::{Capture, Device, Error};

#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]
struct MacAddress {
    data: [u8; 6],
}

#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]
struct Ip4Address {
    data: [u8; 4]
}

#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]
struct Ip6Address {
    data: [u8; 16]
}

#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]
enum IpAddress {
    Ip4(Ip4Address),
    Ip6(Ip6Address),
}

fn main() {
    let mut capture = Capture::from_device("wlp2s0").unwrap()
        .timeout(1)
        .open().unwrap()
        .setnonblock().unwrap();

    let send_packet: &[u8] = &[
        0x00, 0x18, 0x0a, 0x85, 0x47, 0x88,
        0x9c, 0xb6, 0xd0, 0x8b, 0x42, 0x93,
        0x08, 0x00,
        0x45, 0x00, 0x00, 0x54,
        0xa1, 0xd9, 0x40, 0x00,
        0x40, 0x01, 0xe0, 0x9f,
        0xac, 0x1c, 0x0a, 0x12,
        0x01, 0x01, 0x01, 0x01,
        0x08, 0x00, 0x5e, 0x96, 0x28, 0xb1, 0x00, 0x1e,
        0x96, 0x50, 0x64, 0x5e, 0x00, 0x00, 0x00, 0x00,
        0xab, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    ];

    let mut x = 0;

    loop {
        if let Ok(pkt) = capture.next() {
            println!("packet: {:?}", pkt);
        }

        x += 1;

        if x % 1000000 == 0 {
            let r = capture.sendpacket(send_packet);
            println!("{:?}", r);
        }
    }
}
